----- Start of CyanO_esp32C3_arduino.ino -----
#include "TaskScheduler.h"
#include "wifi_manager.h"
#include "sensors.h"
#include "modes.h"
#include "user_interface.h"
#include "time_sync.h"
#include "cli.h"
// #include "web_server.h"
// #include "notifications.h"
// #include "file_manager.h"

WaterLevelSensor tank1(TOUCH_PAD_NUM4); // Replace TOUCH_PAD_NUM1 with the actual pin for tank 1
WaterLevelSensor tank2(TOUCH_PAD_NUM5); // Replace TOUCH_PAD_NUM2 with the actual pin for tank 2
UserInterface ui = UserInterface();

Scheduler runner;

// Define tasks
Task t1(1000, TASK_FOREVER, []() {
    tank1.updateWaterLevel();
    tank2.updateWaterLevel();
});

Task t2(500, TASK_FOREVER, []() {
    handleCLI();
    updateModes();
});

Task t3(10000, TASK_FOREVER, []() {
    syncTime();
});

void setup() {
    tank1.setup();
    tank2.setup();
    setupCLI();
    setupModes(); // Initialize the modes
    updateModes(); // Apply the current mode
    setupWiFi();
    ui.setupUserInterface();
    setupTimeSync();

    // Add tasks to the runner
    runner.addTask(t1);
    runner.addTask(t2);
    runner.addTask(t3);

    // Enable tasks
    t1.enable();
    t2.enable();
    t3.enable();
}

void loop() {
  // sendNotifications();
  // manageFiles();
  runner.execute(); // Execute the scheduler runner
}


----- End of CyanO_esp32C3_arduino.ino -----
----- Start of web_server.h -----
void setupServer();
----- End of web_server.h -----
----- Start of web_server.cpp -----

----- End of web_server.cpp -----
----- Start of modes.h -----
#ifndef MODES_H
#define MODES_H

#include "Arduino.h"

#define MAX_MODES 6

class Mode {
public:
  Mode(String name, bool light, bool heat, bool water, int servoPosition, int pumpSpeed, float pumpDutyCycle)
    : name(name),
      light(light),
      heat(heat),
      water(water),
      servoPosition(servoPosition),
      pumpSpeed(pumpSpeed),
      pumpDutyCycle(pumpDutyCycle) {}

  String name;
  bool light;
  bool heat;
  bool water;
  int servoPosition;
  int pumpSpeed;
  float pumpDutyCycle;
};

class ModeManager {
public:
  ModeManager();
  
  void setCurrentMode(int modeNumber);
  void applyCurrentMode();
  int getCurrentModePumpSpeed();
  int getCurrentModeServoPosition();
  
  // New methods for getting mode properties
  String getCurrentModeName();
  bool getCurrentModeLight();
  bool getCurrentModeHeat();
  bool getCurrentModeWater();

  // New methods for toggling mode properties
  void toggleLight();
  void toggleHeat();
  void toggleWater();

private:
  Mode modes[MAX_MODES];
  Mode* currentMode;
  Mode* lastAppliedMode;
  unsigned long lastPumpToggleTime = 0;
  bool isPumpRunning = false;
  void controlPump();
};

extern ModeManager modeManager;

void setupModes();
void updateModes();
void setPump(int speed);
void setServo(int position);
void setCurrentMode(int modeNumber);

#endif

----- End of modes.h -----
----- Start of modes.cpp -----
#include "Arduino.h"
#include "modes.h"
#include <ESP32Servo.h>
#include <esp_log.h>

#define AIR_PUMP_PIN D10
#define SERVO_PIN D6
#define PWM_CHANNEL 0
#define PWM_RESOLUTION 10 // 10 bit resolution
#define PWM_FREQUENCY 5000 // 5 kHz frequency
#define MAX_PWM 1023 // Maximum for 10  x-bit
#define SERVO_OVERSHOOT 20 // Overshoot in degrees
#define PUMP_ON_DURATION 600000 // 10 minute in milliseconds
int lastServoPosition = 0;
Servo servo;

ModeManager::ModeManager()
    // name, light, heat, water, servoPosition, pumpSpeed, pumpDutyCycle
    : modes{
      Mode("standby", false, false, false, 90, 0, 0.1),
      Mode("aeration", true, true, false, 20, 520, 0.1),
      Mode("extract", true, true, false, 160, MAX_PWM, 1.0),
      Mode("water", true, true, true, 70, 0, 1.0),
      Mode("clean", true, false, true, 120, 0, 1.0),
      Mode("Mode6", true, true, false, 20, 0, 1.0)
      } {
    currentMode = &modes[1];
    lastAppliedMode = nullptr;
}

void ModeManager::setCurrentMode(int modeNumber) {
    ESP_LOGI("Modes", "Modes update called");
    if (modeNumber >= 1 && modeNumber <= 6) {
      currentMode = &modes[modeNumber - 1];
      ESP_LOGI("Modes", "Current mode set to %d", modeNumber);
    } else {
      ESP_LOGE("Modes", "Invalid mode number: %d", modeNumber);
    }
}

void ModeManager::applyCurrentMode() {
    if (currentMode != lastAppliedMode) {
      setPump(currentMode->pumpSpeed);
      setServo(currentMode->servoPosition);
      lastAppliedMode = currentMode;
      lastPumpToggleTime = millis();
    }
    controlPump();
}

int ModeManager::getCurrentModePumpSpeed() {
    return currentMode->pumpSpeed;
}

int ModeManager::getCurrentModeServoPosition() {
    return currentMode->servoPosition;
}

String ModeManager::getCurrentModeName() {
    return currentMode->name;
}

bool ModeManager::getCurrentModeLight() {
    return currentMode->light;
}

bool ModeManager::getCurrentModeHeat() {
    return currentMode->heat;
}

bool ModeManager::getCurrentModeWater() {
    return currentMode->water;
}

void ModeManager::toggleLight() {
    currentMode->light = !currentMode->light;
}

void ModeManager::toggleHeat() {
    currentMode->heat = !currentMode->heat;
}

void ModeManager::toggleWater() {
    currentMode->water = !currentMode->water;
}

void ModeManager::controlPump() {
  unsigned long currentMillis = millis();
  unsigned long cycleDuration = isPumpRunning ? currentMode->pumpDutyCycle * PUMP_ON_DURATION
                                              : (1 - currentMode->pumpDutyCycle) * PUMP_ON_DURATION;

  if (currentMillis - lastPumpToggleTime >= cycleDuration) {
    isPumpRunning = !isPumpRunning;
    setPump(isPumpRunning ? currentMode->pumpSpeed : 0);
    lastPumpToggleTime = currentMillis;
  }
}

ModeManager modeManager;

void setupModes() {
  // Setup PWM
  pinMode(AIR_PUMP_PIN, OUTPUT);
  servo.attach(SERVO_PIN);
  ESP_LOGI("Modes", "Modes setup completed");

}

void updateModes() {
  modeManager.applyCurrentMode();
}

void setPump(int speed) {
  analogWrite(AIR_PUMP_PIN, speed);
  ESP_LOGI("Modes", "Pump set to speed %d", speed);
}

void setServo(int position) {
  int overshootPosition = position + (position > lastServoPosition ? SERVO_OVERSHOOT : -SERVO_OVERSHOOT);
  Serial.print("position : ");
  Serial.println(position);
  Serial.print("overshootPosition : ");
  Serial.println(overshootPosition);
  servo.attach(SERVO_PIN); // attach the servo to move
  servo.write(overshootPosition);
  delay(2000); // Wait for servo to reach overshoot position
  servo.write(position);
  delay(1000); // Wait for servo to reach final position
  servo.detach(); // Detach the servo to not overheat
  lastServoPosition = position;

  ESP_LOGI("Modes", "Servo set to position %d", position);
}

void setCurrentMode(int modeNumber) {
  modeManager.setCurrentMode(modeNumber);
}

----- End of modes.cpp -----
----- Start of user_interface.h -----
#ifndef USER_INTERFACE_H
#define USER_INTERFACE_H

#include <ESPAsyncWebServer.h>

class UserInterface {
public:
    UserInterface();
    void setupUserInterface();
    void handleCommand(AsyncWebServerRequest *request);
    void printToWeb(String message);
    void printToWebln(String message);
    void clearMessageBuffer();
private:
    AsyncWebServer server;
    String messageBuffer;
};

extern UserInterface ui;

#endif
----- End of user_interface.h -----
----- Start of user_interface.cpp -----
#include "user_interface.h"
#include "cli.h" // Include the CLI header to process commands

UserInterface::UserInterface() : server(80) {}

void UserInterface::setupUserInterface() {
    // Setup the server here
    server.on("/", HTTP_GET, [this](AsyncWebServerRequest *request){
        String html = "<html><body>";
        html += "<form id=\"commandForm\" action=\"/command\" method=\"post\">";
        html += "<label for=\"command\">Command:</label><br>";
        html += "<input type=\"text\" id=\"command\" name=\"command\"><br>";
        html += "<input type=\"submit\" value=\"Submit\">";
        html += "</form>";
        html += "<h2>Messages:</h2>";
        html += "<div id=\"messages\">" + this->messageBuffer + "</div>";
        html += "<div id=\"submittedCommands\"></div>";
        html += "<script>";
        html += "document.getElementById('commandForm').addEventListener('submit', function(event) {";
        html += "event.preventDefault();";
        html += "var command = document.getElementById('command').value;";
        html += "fetch('/command', {method: 'POST', body: new URLSearchParams('command=' + command)}).then(function(response) {";
        html += "if(response.ok) {";
        html += "return response.text();";
        html += "} else {";
        html += "throw new Error('Failed to send command');";
        html += "}";
        html += "}).then(function(text) {";
        html += "document.getElementById('submittedCommands').innerHTML += '<p>' + command + '</p>';";
        html += "document.getElementById('command').value = '';";
        html += "location.reload();"; // Add this line to reload the page
        html += "}).catch(function(error) {";
        html += "console.error('Failed to send command: ', error);";
        html += "});";
        html += "});";
        html += "</script>";
        html += "</body></html>";
        request->send(200, "text/html", html);
    });
    // Add a new endpoint for sending commands
    server.on("/command", HTTP_POST, [this](AsyncWebServerRequest *request){
        this->handleCommand(request);
    });
    server.begin();
}




void UserInterface::handleCommand(AsyncWebServerRequest *request) {
    if (request->hasParam("command", true)) { // Check if the request has a "command" parameter in the body
        String command = request->getParam("command", true)->value(); // Get the command value
        processCommand(command); // Process the command using the CLI's processCommand function
        request->send(200, "text/plain", "Command processed");
    } else {
        request->send(400, "text/plain", "No command provided");
    }
}

void UserInterface::printToWebln(String message) {
    messageBuffer += message + "<br>";
    if (messageBuffer.length() > 5000) { // Limit the size of the message buffer to prevent it from getting too large
        messageBuffer = messageBuffer.substring(1000); // Remove the oldest messages
    }
}

void UserInterface::printToWeb(String message) {
    messageBuffer += message + "<br>";
    if (messageBuffer.length() > 5000) { // Limit the size of the message buffer to prevent it from getting too large
        messageBuffer = messageBuffer.substring(1000); // Remove the oldest messages
    }
}

void UserInterface::clearMessageBuffer() {
    messageBuffer = "";
}

----- End of user_interface.cpp -----
----- Start of time_sync.h -----
#ifndef TIME_SYNC_H
#define TIME_SYNC_H

#include <WiFi.h>
#include <time.h>

void setupTimeSync();
void syncTime();

#endif

----- End of time_sync.h -----
----- Start of time_sync.cpp -----
#include "time_sync.h"

void setupTimeSync() {
  configTime(0, 0, "pool.ntp.org", "time.nist.gov");
  Serial.println("\nWaiting for time");
  while (!time(nullptr)) {
    Serial.print(".");
    delay(1000);
  }
  time_t now = time(nullptr);
  Serial.println(ctime(&now));
}

void syncTime() {
  time_t now = time(nullptr);
  //Serial.println(ctime(&now));
}

----- End of time_sync.cpp -----
----- Start of cli.h -----
#ifndef CLI_H
#define CLI_H

#include <Arduino.h>
#include "modes.h"

extern ModeManager modeManager;

void setupCLI();
void handleCLI();
void processCommand(String command);

#endif

----- End of cli.h -----
----- Start of cli.cpp -----
#include "Arduino.h"
#include "cli.h"
#include "modes.h"
#include "esp_log.h"
#include "WiFi.h"
#include "user_interface.h"

static const char* TAG = "CLI";

template <typename T>
void customPrintln(T message) {
  Serial.println(message);
  ui.printToWebln(String(message));
}

template <typename T>
void customPrint(T message) {
  Serial.print(message);
  ui.printToWeb(String(message));
}

// Specialization for IPAddress type
template <>
void customPrintln<IPAddress>(IPAddress message) {
  Serial.println(message);
  ui.printToWebln(String(message[0]) + "." + String(message[1]) + "." + String(message[2]) + "." + String(message[3]));
}

template <>
void customPrint<IPAddress>(IPAddress message) {
  Serial.print(message);
  ui.printToWeb(String(message[0]) + "." + String(message[1]) + "." + String(message[2]) + "." + String(message[3]));
}




void setupCLI() {
  Serial.begin(115200);  // Start the Serial communication to send messages to the computer
  delay(10);
  ESP_LOGI(TAG, "Starting...");
  // Any other CLI setup code goes here
}

void handleCLI() {
  // Check if there's any incoming data
  if (Serial.available() > 0) {
    // Read the incoming data
    String command = Serial.readStringUntil('\n');

    // Remove any trailing carriage return
    command.trim();

    // Process the command
    processCommand(command);
  }
}

void processCommand(String command) {
  if (command.startsWith("pump ") or command.startsWith("Pump ")) {
    int speed = command.substring(5).toInt();
    setPump(speed);
    ESP_LOGI(TAG, "Pump speed set to %d", speed);
  } else if (command == "mode status" or command == "get status") {
    customPrintln("Mode name: " + modeManager.getCurrentModeName());
    customPrintln("Light status: " + String(modeManager.getCurrentModeLight() ? "on" : "off"));
    customPrintln("Heat status: " + String(modeManager.getCurrentModeHeat() ? "on" : "off"));
    customPrintln("Water status: " + String(modeManager.getCurrentModeWater() ? "on" : "off"));
    customPrintln("Servo position: " + String(modeManager.getCurrentModeServoPosition()));
    customPrintln("Pump speed: " + String(modeManager.getCurrentModePumpSpeed()));
  } else if (command.startsWith("servo ") or command.startsWith("Servo ")) {
    int position = command.substring(6).toInt();
    setServo(position);
    ESP_LOGI(TAG, "Servo set to position %d", position);
  } else if (command.startsWith("mode ")or command.startsWith("Mode ")) {
    int modeNumber = command.substring(5).toInt();
    setCurrentMode(modeNumber);
    customPrintln("Mode set to " + String(modeNumber));
  } else if (command == "light" or command == "Light") {
    modeManager.toggleLight();
    customPrintln("Light toggled");
  } else if (command == "heat" or command == "Heat") {
    modeManager.toggleHeat();
    customPrintln("Heat toggled");
  } else if (command == "water" or command == "Water") {
    modeManager.toggleWater();
    customPrintln("Water toggled");
  
  } else if (command == "get IP" or command == "Get IP" or command == "Get ip" or command == "get ip"){
    if (WiFi.status() == WL_CONNECTED) {
        customPrintln((WiFi.localIP()));
    } else {
        customPrintln("Not connected to WiFi");
    }
  } else if (command == "clear" or command == "Clear") {
    ui.clearMessageBuffer();
  } else {
    ESP_LOGI(TAG, "Unknown command: %s", command.c_str());
  }
}


----- End of cli.cpp -----
----- Start of wifi_manager.h -----
#ifndef WIFI_MANAGER_H
#define WIFI_MANAGER_H

extern const char* ssid;
extern const char* password;

extern const char* ap_ssid;
extern const char* ap_password;

void connectToWiFi(const char* ssid_, const char* password_);
void createAP(const char* ssid_, const char* password_);
void setupWiFi(const char* ssid_ = ssid, const char* password_ = password);
void checkWiFi();
void scanNetworks();

#endif

----- End of wifi_manager.h -----
----- Start of wifi_manager.cpp -----
#include "Arduino.h"
#include "WiFi.h"
#include "wifi_manager.h"

const char* ssid = "BELL805";
const char* password = "Bertrande";
const char* ap_ssid = "CyanO";
const char* ap_password = "1234";

void setupWiFi(const char* ssid_, const char* password_) {
 connectToWiFi(ssid_, password_);
 if (WiFi.status() != WL_CONNECTED) {
   createAP(ap_ssid, ap_password);
 }
}
void connectToWiFi(const char* ssid_, const char* password_) {
 WiFi.begin(ssid_, password_);
 int attempt = 0;
 while (WiFi.status() != WL_CONNECTED && attempt < 10) {
   delay(1000);
   Serial.println("Connecting to WiFi...");
   attempt++;
 }
 if (WiFi.status() == WL_CONNECTED) {
   Serial.println("Connected to WiFi");
 } else {
   Serial.println("Failed to connect to WiFi");
 }
}
void createAP(const char* ssid_, const char* password_) {
 WiFi.softAP(ssid_, password_);
 Serial.println("Access point created");
}
void checkWiFi() {
 // Check WiFi status
 if (WiFi.getMode() == WIFI_STA && WiFi.status() != WL_CONNECTED) {
   Serial.println("WiFi connection lost, reconnecting...");
   setupWiFi(ssid, password);
 }
}
void scanNetworks() {
 // WiFi scan mode
 WiFi.mode(WIFI_STA);
 WiFi.disconnect();
 delay(100);
 // Start the scan
 int n = WiFi.scanNetworks();
 if (n == 0) {
   Serial.println("No networks found");
 } else {
   for (int i = 0; i < n; ++i) {
     // Print a string with the SSID and RSSI for each network found
     String network = WiFi.SSID(i) + " (" + WiFi.RSSI(i) + ")";
     Serial.println(network);
   }
 }
}

----- End of wifi_manager.cpp -----
----- Start of sensors.h -----
#ifndef SENSORS_H
#define SENSORS_H

#include "Arduino.h"
#include <esp_log.h>

class WaterLevelSensor {
public:
    WaterLevelSensor(touch_pad_t pin);
    void setup();
    void updateWaterLevel();
    int getLatestReading();
private:
    touch_pad_t pin;
    int latestReading;
};

#endif

----- End of sensors.h -----
----- Start of sensors.cpp -----
#include "sensors.h"
#include "esp32-hal-touch.h"

static const char* TAG = "Sensors";

WaterLevelSensor::WaterLevelSensor(touch_pad_t pin) : pin(pin), latestReading(0) {
}

void WaterLevelSensor::setup() {
    // Initialize touch pin
    touchAttachInterrupt(pin, nullptr, 0);
    ESP_LOGI(TAG, "Sensor on pin %d setup completed", pin);
}

void WaterLevelSensor::updateWaterLevel() {
    uint16_t touchValue;
    touchValue = touchRead(pin);
    latestReading = touchValue;
    //Serial.print("sensor_");
    //Serial.print(pin);
    //Serial.print(":");
    //Serial.print(touchValue);
    //ESP_LOGD(TAG, "Touch read value on pin %d: %d", pin, touchValue);
}

int WaterLevelSensor::getLatestReading() {
    return latestReading;
}

----- End of sensors.cpp -----
